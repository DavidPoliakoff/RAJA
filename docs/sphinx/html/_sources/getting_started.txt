
Configuring and building the code
----------------------------------

This section provides a brief discussion of how to configure and build
the RAJA code.

RAJA contains a simple CMake-based build system and requires that you 
use a version of CMake greater than 3.1.  You can download CMake binaries 
or source from `<http://www.cmake.org/download/>`_

An important thing to note is that our CMake setup does not allow
in-source builds so that you can easily configure and build for various
systems and compilers from the same source code.

Configuring the code can be done in a couple of ways depending on your needs.

**Use the provided configuration script.**

  If you have python installed on your system, you can execute a
  python helper script from the root directory of the RAJA source code
  to configure a build ::

    $ ./scripts/config-build.py

  This script will find and use a configuration file to initialize the
  CMake cache and create build and install directories in the RAJA root
  directory whose names contain the system type, compiler, and built type. 
  For example ::

    $ ls
    build-chaos-gnu-debug 
    install-chaos-gnu-debug 

  The configuration files are located in the 'host-config' directory. 
  If you run the python script with no arguments, it will configure the
  code using a default compiler and options for the platform you are on.
  The script accepts several options for

  * specifying the build and install directory paths and names
  * specifying the compiler
  * specifying the build type (Release, Debug, RelWithDebInfo)
  * specifying CMake options
  * selecting the host configuration file to initialize the 

  Script options can be displayed by running ::

    $ ./scripts/config-build.py --help

  The 'host-configs' directory contains configuration files for platforms 
  and compilers most commonly used in the Livermore Computing Center at 
  Lawrence Livermore National Laboratory. Other host configuration cache files
  can be created by copying an exisiting one to a new file and modifying
  the contents for your needs.

**Run CMake directly.**

  You can also run CMake directly. To configure the code using this method,
  create a build directory in the root directory and go into it ::

    $ my-awesome-build
    $ cd my-awesome-build

  Then, invoke CMake and specify the build type and cache file you want and
  the location of the top-level RAJA CMakeLists.txt file;
  for example ::

    $ cmake -DCMAKE_BUILD_TYPE=Debug -C ../host-configs/chaos/gnu_4_9_3.cmake ../

Regardless of how you configure your build, you build the code by going into 
the build directory and typing ::

  $ make

If you want to also create an installation of the code, you can type ::

  $ make install

This will create 'include' and 'lib' directories in the install directory.

  
Basic tests
------------


Example applications
----------------------

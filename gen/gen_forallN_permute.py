#!/usr/bin/env python
#
# Copyright (c) 2016, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
#
# All rights reserved.
#
# This source code cannot be distributed without permission and
# further review from Lawrence Livermore National Laboratory.
#


import sys
from itertools import permutations
from lperm import *



def writeForallPermutations(ndims):
  
  dim_names = getDimNames(ndims)
  
  # Create common strings to all perms
  body_args     = ", ".join(dim_names)  
  next_template = ", ".join(map(lambda a: "typename P%s"%a.upper() , dim_names))
  next_param    = ", ".join(map(lambda a: "P%s const &p%s"%(a.upper(), a) , dim_names))
  
  # Loop over each permutation specialization
  perms = getDimPerms(dim_names)
  for perm in perms:
    # get enumeration name
    enum_name = getEnumName(perm)
    
    # Compute permuted arguments
    func_param   = ", ".join(map(lambda a: "Index_type %s"%a , perm))  
    policy_args   = ", ".join(map(lambda a: "p%s"%a , perm))
    
    # Print header for functor
    print """
template<typename BODY>
struct ForallN_Permute_Functor<%s, BODY>{

  RAJA_INLINE
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(%s) const {
    body(%s);
  }
  
  template<typename NextPolicy, typename TAG, %s>
  RAJA_INLINE
  void callNextPolicy(%s) const {
    forallN_policy<NextPolicy>(TAG(), *this, %s);
  }
  
  BODY body;
};

    """ % (enum_name, func_param, body_args, next_template, next_param, policy_args)
    


def main(ndims):
  # ACTUAL SCRIPT ENTRY:
  print """//AUTOGENERATED BY gen_forallN_generic.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_forallN_permute_HXX__
#define RAJA_forallN_permute_HXX__

#include "forallN_permute_lf.hxx"

namespace RAJA {

""" 
  ndims_list = range(2,ndims+1)

  # Create the loop interchange specializations for each permutation
  for n in ndims_list:
    writeForallPermutations(n)

  print """

} // namespace RAJA
  
#endif
"""

if __name__ == '__main__':
  main(int(sys.argv[1]))
  

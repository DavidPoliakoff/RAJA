//AUTOGENERATED BY gen_forallN_generic.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_forallN_tile_HXX__
#define RAJA_forallN_tile_HXX__

#include"config.hxx"
#include"int_datatypes.hxx"

namespace RAJA {



/******************************************************************
 *  ForallN tiling policies
 ******************************************************************/

// Tiling Policy
struct Forall2_Tile_Tag {};
template<typename TILE_I, typename TILE_J, typename NEXT=Forall2_Execute>
struct Forall2_Tile {
  typedef Forall2_Tile_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef TILE_I TileI;
  typedef TILE_J TileJ;
};

// Tiling Policy
struct Forall3_Tile_Tag {};
template<typename TILE_I, typename TILE_J, typename TILE_K, typename NEXT=Forall3_Execute>
struct Forall3_Tile {
  typedef Forall3_Tile_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef TILE_I TileI;
  typedef TILE_J TileJ;
  typedef TILE_K TileK;
};

// Tiling Policy
struct Forall4_Tile_Tag {};
template<typename TILE_I, typename TILE_J, typename TILE_K, typename TILE_L, typename NEXT=Forall4_Execute>
struct Forall4_Tile {
  typedef Forall4_Tile_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef TILE_I TileI;
  typedef TILE_J TileJ;
  typedef TILE_K TileK;
  typedef TILE_L TileL;
};

// Tiling Policy
struct Forall5_Tile_Tag {};
template<typename TILE_I, typename TILE_J, typename TILE_K, typename TILE_L, typename TILE_M, typename NEXT=Forall5_Execute>
struct Forall5_Tile {
  typedef Forall5_Tile_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef TILE_I TileI;
  typedef TILE_J TileJ;
  typedef TILE_K TileK;
  typedef TILE_L TileL;
  typedef TILE_M TileM;
};


/******************************************************************
 *  forallN_policy(), tiling execution
 ******************************************************************/


/*!
 * \brief Tiling policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Tile_Tag, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
  typedef typename POLICY::TileI TileI;
  typedef typename POLICY::TileJ TileJ;

  // execute the next policy
      forall_tile(TileI(), is_i, [=](RAJA::RangeSegment is_ii){
        forall_tile(TileJ(), is_j, [=](RAJA::RangeSegment is_jj){
      forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_ii, is_jj, body);
        });
      });
}



/*!
 * \brief Tiling policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_policy(Forall3_Tile_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
  typedef typename POLICY::TileI TileI;
  typedef typename POLICY::TileJ TileJ;
  typedef typename POLICY::TileK TileK;

  // execute the next policy
      forall_tile(TileI(), is_i, [=](RAJA::RangeSegment is_ii){
        forall_tile(TileJ(), is_j, [=](RAJA::RangeSegment is_jj){
          forall_tile(TileK(), is_k, [=](RAJA::RangeSegment is_kk){
        forall3_policy<NextPolicy, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_ii, is_jj, is_kk, body);
          });
        });
      });
}



/*!
 * \brief Tiling policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_policy(Forall4_Tile_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
  typedef typename POLICY::TileI TileI;
  typedef typename POLICY::TileJ TileJ;
  typedef typename POLICY::TileK TileK;
  typedef typename POLICY::TileL TileL;

  // execute the next policy
      forall_tile(TileI(), is_i, [=](RAJA::RangeSegment is_ii){
        forall_tile(TileJ(), is_j, [=](RAJA::RangeSegment is_jj){
          forall_tile(TileK(), is_k, [=](RAJA::RangeSegment is_kk){
            forall_tile(TileL(), is_l, [=](RAJA::RangeSegment is_ll){
          forall4_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_ii, is_jj, is_kk, is_ll, body);
            });
          });
        });
      });
}



/*!
 * \brief Tiling policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Tile_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
  typedef typename POLICY::TileI TileI;
  typedef typename POLICY::TileJ TileJ;
  typedef typename POLICY::TileK TileK;
  typedef typename POLICY::TileL TileL;
  typedef typename POLICY::TileM TileM;

  // execute the next policy
      forall_tile(TileI(), is_i, [=](RAJA::RangeSegment is_ii){
        forall_tile(TileJ(), is_j, [=](RAJA::RangeSegment is_jj){
          forall_tile(TileK(), is_k, [=](RAJA::RangeSegment is_kk){
            forall_tile(TileL(), is_l, [=](RAJA::RangeSegment is_ll){
              forall_tile(TileM(), is_m, [=](RAJA::RangeSegment is_mm){
            forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_ii, is_jj, is_kk, is_ll, is_mm, body);
              });
            });
          });
        });
      });
}




} // namespace RAJA
  
#endif


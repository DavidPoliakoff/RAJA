//AUTOGENERATED BY gen_forallN_generic.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_forallN_openmp_HXX__
#define RAJA_forallN_openmp_HXX__

#include<RAJA/config.hxx>
#include<RAJA/int_datatypes.hxx>

namespace RAJA {



/******************************************************************
 *  ForallN OpenMP Parallel Region policies
 ******************************************************************/

// Begin OpenMP Parallel Region
struct Forall2_OMP_Parallel_Tag {};
template<typename NEXT=ForallN_Execute>
struct Forall2_OMP_Parallel {
  typedef Forall2_OMP_Parallel_Tag PolicyTag;
  typedef NEXT NextPolicy;
};

// Begin OpenMP Parallel Region
struct Forall3_OMP_Parallel_Tag {};
template<typename NEXT=ForallN_Execute>
struct Forall3_OMP_Parallel {
  typedef Forall3_OMP_Parallel_Tag PolicyTag;
  typedef NEXT NextPolicy;
};

// Begin OpenMP Parallel Region
struct Forall4_OMP_Parallel_Tag {};
template<typename NEXT=ForallN_Execute>
struct Forall4_OMP_Parallel {
  typedef Forall4_OMP_Parallel_Tag PolicyTag;
  typedef NEXT NextPolicy;
};





/******************************************************************
 *  forallN_policy(), OpenMP Parallel Region execution
 ******************************************************************/


/*!
 * \brief OpenMP Parallel Region Section policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // create OpenMP Parallel Region
#ifdef _OPENMP
#pragma omp parallel
#endif
  {
    // execute the next policy
    forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_i, is_j, body);
  }
}


/*!
 * \brief OpenMP Parallel Region Section policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_policy(Forall3_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // create OpenMP Parallel Region
#ifdef _OPENMP
#pragma omp parallel
#endif
  {
    // execute the next policy
    forall3_policy<NextPolicy, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_j, is_k, body);
  }
}


/*!
 * \brief OpenMP Parallel Region Section policy function.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_policy(Forall4_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // create OpenMP Parallel Region
#ifdef _OPENMP
#pragma omp parallel
#endif
  {
    // execute the next policy
    forall4_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_j, is_k, is_l, body);
  }
}




} // namespace RAJA
  
#endif


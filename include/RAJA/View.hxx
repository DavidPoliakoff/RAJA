//AUTOGENERATED BY genView.py
  
#ifndef RAJA_VIEW_HXX__
#define RAJA_VIEW_HXX__

#include <RAJA/Layout.hxx>

namespace RAJA {

template<typename DataType, typename Layout>
struct View1d {
  typedef typename Layout::Permutation Permutation;
  typedef typename Layout::IndexI IndexI;

  Layout const layout;
  DataType *data;

  inline View1d(DataType *data_ptr, Index_type ni):
    layout(ni),
    data(data_ptr)
  {}

  inline DataType &operator()(IndexI i) const {
    return data[convertIndex<Index_type>(layout(i))];
  }
};

template<typename DataType, typename Layout>
struct View2d {
  typedef typename Layout::Permutation Permutation;
  typedef typename Layout::IndexI IndexI;
  typedef typename Layout::IndexJ IndexJ;

  Layout const layout;
  DataType *data;

  inline View2d(DataType *data_ptr, Index_type ni, Index_type nj):
    layout(ni, nj),
    data(data_ptr)
  {}

  inline DataType &operator()(IndexI i, IndexJ j) const {
    return data[convertIndex<Index_type>(layout(i, j))];
  }
};

template<typename DataType, typename Layout>
struct View3d {
  typedef typename Layout::Permutation Permutation;
  typedef typename Layout::IndexI IndexI;
  typedef typename Layout::IndexJ IndexJ;
  typedef typename Layout::IndexK IndexK;

  Layout const layout;
  DataType *data;

  inline View3d(DataType *data_ptr, Index_type ni, Index_type nj, Index_type nk):
    layout(ni, nj, nk),
    data(data_ptr)
  {}

  inline DataType &operator()(IndexI i, IndexJ j, IndexK k) const {
    return data[convertIndex<Index_type>(layout(i, j, k))];
  }
};

template<typename DataType, typename Layout>
struct View4d {
  typedef typename Layout::Permutation Permutation;
  typedef typename Layout::IndexI IndexI;
  typedef typename Layout::IndexJ IndexJ;
  typedef typename Layout::IndexK IndexK;
  typedef typename Layout::IndexL IndexL;

  Layout const layout;
  DataType *data;

  inline View4d(DataType *data_ptr, Index_type ni, Index_type nj, Index_type nk, Index_type nl):
    layout(ni, nj, nk, nl),
    data(data_ptr)
  {}

  inline DataType &operator()(IndexI i, IndexJ j, IndexK k, IndexL l) const {
    return data[convertIndex<Index_type>(layout(i, j, k, l))];
  }
};

template<typename DataType, typename Layout>
struct View5d {
  typedef typename Layout::Permutation Permutation;
  typedef typename Layout::IndexI IndexI;
  typedef typename Layout::IndexJ IndexJ;
  typedef typename Layout::IndexK IndexK;
  typedef typename Layout::IndexL IndexL;
  typedef typename Layout::IndexM IndexM;

  Layout const layout;
  DataType *data;

  inline View5d(DataType *data_ptr, Index_type ni, Index_type nj, Index_type nk, Index_type nl, Index_type nm):
    layout(ni, nj, nk, nl, nm),
    data(data_ptr)
  {}

  inline DataType &operator()(IndexI i, IndexJ j, IndexK k, IndexL l, IndexM m) const {
    return data[convertIndex<Index_type>(layout(i, j, k, l, m))];
  }
};



} // namespace RAJA

#endif


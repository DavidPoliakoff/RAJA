//AUTOGENERATED BY gen_forallN_generic.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_forallN_generic_HXX__
#define RAJA_forallN_generic_HXX__

#include"config.hxx"
#include"int_datatypes.hxx"

namespace RAJA {



/******************************************************************
 *  ForallN generic policies
 ******************************************************************/

// Execute (Termination default)
struct Forall2_Execute_Tag {};
struct Forall2_Execute {
  typedef Forall2_Execute_Tag PolicyTag;
};

// Starting (outer) policy for all forall2 policies
template<typename POL_I, typename POL_J, typename NEXT=Forall2_Execute>
struct Forall2_Policy {
  typedef NEXT NextPolicy;
  typedef POL_I PolicyI;
  typedef POL_J PolicyJ;
};

// Execute (Termination default)
struct Forall3_Execute_Tag {};
struct Forall3_Execute {
  typedef Forall3_Execute_Tag PolicyTag;
};

// Starting (outer) policy for all forall3 policies
template<typename POL_I, typename POL_J, typename POL_K, typename NEXT=Forall3_Execute>
struct Forall3_Policy {
  typedef NEXT NextPolicy;
  typedef POL_I PolicyI;
  typedef POL_J PolicyJ;
  typedef POL_K PolicyK;
};

// Execute (Termination default)
struct Forall4_Execute_Tag {};
struct Forall4_Execute {
  typedef Forall4_Execute_Tag PolicyTag;
};

// Starting (outer) policy for all forall4 policies
template<typename POL_I, typename POL_J, typename POL_K, typename POL_L, typename NEXT=Forall4_Execute>
struct Forall4_Policy {
  typedef NEXT NextPolicy;
  typedef POL_I PolicyI;
  typedef POL_J PolicyJ;
  typedef POL_K PolicyK;
  typedef POL_L PolicyL;
};

// Execute (Termination default)
struct Forall5_Execute_Tag {};
struct Forall5_Execute {
  typedef Forall5_Execute_Tag PolicyTag;
};

// Starting (outer) policy for all forall5 policies
template<typename POL_I, typename POL_J, typename POL_K, typename POL_L, typename POL_M, typename NEXT=Forall5_Execute>
struct Forall5_Policy {
  typedef NEXT NextPolicy;
  typedef POL_I PolicyI;
  typedef POL_J PolicyJ;
  typedef POL_K PolicyK;
  typedef POL_L PolicyL;
  typedef POL_M PolicyM;
};




/******************************************************************
 *  forallN_policy() Foreward declarations
 ******************************************************************/

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY, typename TAG>
RAJA_INLINE void forall2_policy(TAG, TI const &is_i, TJ const &is_j, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY, typename TAG>
RAJA_INLINE void forall3_policy(TAG, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY, typename TAG>
RAJA_INLINE void forall4_policy(TAG, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY, typename TAG>
RAJA_INLINE void forall5_policy(TAG, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body);

/******************************************************************
 *  ForallN_Executor(): Default Executor for loops
 ******************************************************************/


template<typename BODY, typename INDEX_TYPE=Index_type>
struct ForallN_BindFirstArg {

  BODY const body;
  INDEX_TYPE const i;

  RAJA_INLINE
  RAJA_HOST_DEVICE
  ForallN_BindFirstArg(BODY const &b, INDEX_TYPE i0) : body(b), i(i0) {}

  template<typename ... ARGS>
  RAJA_INLINE
  RAJA_HOST_DEVICE
  void operator()(ARGS ... args) const {
    body(i, args...);
  }
};

template<typename NextExec, typename BODY>
struct ForallN_PeelOuter {

  NextExec const next_exec;
  BODY const body;

  RAJA_INLINE
  RAJA_HOST_DEVICE
  ForallN_PeelOuter(NextExec const &ne, BODY const &b) : next_exec(ne), body(b) {}

  RAJA_INLINE
  RAJA_HOST_DEVICE
  void operator()(Index_type i) const {
    ForallN_BindFirstArg<BODY> inner(body, i);
    next_exec(inner);
  }
};


template<typename P, typename I>
struct ForallN_PolicyPair{
  typedef P POLICY;
  typedef I ISET;
};

template<typename PI>
struct Forall1Executor {
  typedef typename PI::ISET TI;
  typedef typename PI::POLICY POLICY_I;

  TI const is_i;

  explicit Forall1Executor(TI const &is_i0) : is_i(is_i0) {}

  template<typename BODY>
  inline void RAJA_HOST_DEVICE operator()(BODY body) const {
    RAJA::forall<POLICY_I>(is_i, body);
  }
};

template<typename PI, typename ... PREST>
struct ForallN_Executor {
  typedef typename PI::ISET TI;
  typedef typename PI::POLICY POLICY_I;

  typedef ForallN_Executor<PREST...> NextExec;

  TI const is_i;
  NextExec next_exec;

  template<typename ... TREST>
  ForallN_Executor(TI const &is_i0, TREST ... is_rest) : is_i(is_i0), next_exec(is_rest...) {}

  template<typename BODY>
  inline void operator()(BODY body) const {
    ForallN_PeelOuter<NextExec, BODY> outer(next_exec, body);
    RAJA::forall<POLICY_I>(is_i, outer);
  }
};


template<typename PI>
struct ForallN_Executor<PI> {
  typedef typename PI::ISET TI;
  typedef typename PI::POLICY POLICY_I;

  TI const &is_i;

  explicit ForallN_Executor(TI const &is_i0) : is_i(is_i0) {}

  template<typename BODY>
  inline void RAJA_HOST_DEVICE operator()(BODY body) const {
    RAJA::forall<POLICY_I>(is_i, body);
  }
};



/******************************************************************
 *  forallN_policy(), base execution policies
 ******************************************************************/


/*!
 * \brief Execute inner loops policy function.
 *
 * This is the default termination case.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE
void forall2_policy(Forall2_Execute_Tag, TI const &is_i, TJ const &is_j, BODY body){

  // Create executor object to launch loops
  ForallN_Executor<ForallN_PolicyPair<PolicyI, TI>,ForallN_PolicyPair<PolicyJ, TJ>> exec(is_i, is_j);

  // Launch loop body
  exec(body);
}




/*!
 * \brief Execute inner loops policy function.
 *
 * This is the default termination case.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_policy(Forall3_Execute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){

  // Create executor object to launch loops
  ForallN_Executor<ForallN_PolicyPair<PolicyI, TI>,ForallN_PolicyPair<PolicyJ, TJ>,ForallN_PolicyPair<PolicyK, TK>> exec(is_i, is_j, is_k);

  // Launch loop body
  exec(body);
}




/*!
 * \brief Execute inner loops policy function.
 *
 * This is the default termination case.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_policy(Forall4_Execute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){

  // Create executor object to launch loops
  ForallN_Executor<ForallN_PolicyPair<PolicyI, TI>,ForallN_PolicyPair<PolicyJ, TJ>,ForallN_PolicyPair<PolicyK, TK>,ForallN_PolicyPair<PolicyL, TL>> exec(is_i, is_j, is_k, is_l);

  // Launch loop body
  exec(body);
}




/******************************************************************
 *  Index type conversion, wraps lambda given by user with an outer
 *  callable object where all variables are Index_type
 ******************************************************************/



template<typename BODY, typename IdxI, typename ... IdxRest>
struct ForallN_IndexTypeConverter {

  explicit ForallN_IndexTypeConverter(BODY const &b) : body(b) {}

  // call 'policy' layer with next policy
  template<typename ... ARGS>
  inline void RAJA_HOST_DEVICE operator()(Index_type i, ARGS ... args) const {
    // Bind the first argument
    ForallN_BindFirstArg<BODY, IdxI> bound(body, IdxI(i));

    // Peel a wrapper
    ForallN_IndexTypeConverter<ForallN_BindFirstArg<BODY, IdxI>, IdxRest...> inner(bound);
    inner(args...);
  }

  // Copy of loop body
  BODY const &body;
};

template<typename BODY, typename IdxI>
struct ForallN_IndexTypeConverter<BODY, IdxI> {

  explicit ForallN_IndexTypeConverter(BODY const &b) : body(b) {}

  // call 'policy' layer with next policy
  inline void RAJA_HOST_DEVICE operator()(Index_type i) const {
    body(IdxI(i));
  }

  // Copy of loop body
  BODY const &body;
};


/******************************************************************
 *  forallN User API
 ******************************************************************/


/*!
 * \brief Provides abstraction of a 2-nested loop
 *
 * Provides index typing, and initial nested policy unwrapping
 */
template<typename POLICY, typename IdxI=Index_type, typename IdxJ=Index_type, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forallN(TI const &is_i, TJ const &is_j, BODY body){
  // extract next policy
  typedef typename POLICY::NextPolicy             NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag  NextPolicyTag;

  // extract each loop's execution policy
  typedef typename POLICY::PolicyI                PolicyI;
  typedef typename POLICY::PolicyJ                PolicyJ;

  // call 'policy' layer with next policy
  ForallN_IndexTypeConverter<BODY, IdxI, IdxJ> lamb(body);
  forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_i, is_j, lamb);
}

/*!
 * \brief Provides abstraction of a 3-nested loop
 *
 * Provides index typing, and initial nested policy unwrapping
 */
template<typename POLICY, typename IdxI=Index_type, typename IdxJ=Index_type, typename IdxK=Index_type, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forallN(TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  // extract next policy
  typedef typename POLICY::NextPolicy             NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag  NextPolicyTag;

  // extract each loop's execution policy
  typedef typename POLICY::PolicyI                PolicyI;
  typedef typename POLICY::PolicyJ                PolicyJ;
  typedef typename POLICY::PolicyK                PolicyK;

  // call 'policy' layer with next policy
  ForallN_IndexTypeConverter<BODY, IdxI, IdxJ, IdxK> lamb(body);
  forall3_policy<NextPolicy, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_j, is_k, lamb);
}

/*!
 * \brief Provides abstraction of a 4-nested loop
 *
 * Provides index typing, and initial nested policy unwrapping
 */
template<typename POLICY, typename IdxI=Index_type, typename IdxJ=Index_type, typename IdxK=Index_type, typename IdxL=Index_type, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forallN(TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  // extract next policy
  typedef typename POLICY::NextPolicy             NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag  NextPolicyTag;

  // extract each loop's execution policy
  typedef typename POLICY::PolicyI                PolicyI;
  typedef typename POLICY::PolicyJ                PolicyJ;
  typedef typename POLICY::PolicyK                PolicyK;
  typedef typename POLICY::PolicyL                PolicyL;

  // call 'policy' layer with next policy
  ForallN_IndexTypeConverter<BODY, IdxI, IdxJ, IdxK, IdxL> lamb(body);
  forall4_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_j, is_k, is_l, lamb);
}





} // namespace RAJA
  
#endif


//AUTOGENERATED BY genForallN.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_DOMAIN_FORALL5_HXX__
#define RAJA_DOMAIN_FORALL5_HXX__

#include<RAJA/RAJA.hxx>
#include<RAJA/Tile.hxx>

namespace RAJA {



/******************************************************************
 *  Policy base class, forall5()
 ******************************************************************/

// Execute (Termination default)
struct Forall5_Execute_Tag {};
struct Forall5_Execute {
  typedef Forall5_Execute_Tag PolicyTag;
};

// Starting (outer) policy for all forall5 policies
template<typename POL_I=RAJA::seq_exec, typename POL_J=RAJA::seq_exec, typename POL_K=RAJA::seq_exec, typename POL_L=RAJA::seq_exec, typename POL_M=RAJA::seq_exec, typename NEXT=Forall5_Execute>
struct Forall5_Policy {
  typedef NEXT NextPolicy;
  typedef POL_I PolicyI;
  typedef POL_J PolicyJ;
  typedef POL_K PolicyK;
  typedef POL_L PolicyL;
  typedef POL_M PolicyM;
};

// Interchange loop order given permutation
struct Forall5_Permute_Tag {};
template<typename LOOP_ORDER, typename NEXT=Forall5_Execute>
struct Forall5_Permute {
  typedef Forall5_Permute_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef LOOP_ORDER LoopOrder;
};

// Begin OpenMP Parallel Region
struct Forall5_OMP_Parallel_Tag {};
template<typename NEXT=Forall5_Execute>
struct Forall5_OMP_Parallel {
  typedef Forall5_OMP_Parallel_Tag PolicyTag;
  typedef NEXT NextPolicy;
};

// Tiling Policy
struct Forall5_Tile_Tag {};
template<typename TILE_I, typename TILE_J, typename TILE_K, typename TILE_L, typename TILE_M, typename NEXT=Forall5_Execute>
struct Forall5_Tile {
  typedef Forall5_Tile_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef TILE_I TileI;
  typedef TILE_J TileJ;
  typedef TILE_K TileK;
  typedef TILE_L TileL;
  typedef TILE_M TileM;
};


/******************************************************************
 *  forall5_policy() Foreward declarations
 ******************************************************************/

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Execute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Permute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Tile_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body);


/******************************************************************
 *  Forall5Executor(): Default Executor for loops
 ******************************************************************/

template<typename POLICY_I, typename POLICY_J, typename POLICY_K, typename POLICY_L, typename POLICY_M, typename TI, typename TJ, typename TK, typename TL, typename TM>
struct Forall5Executor {
  template<typename BODY>
  inline void operator()(TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body) const {
    RAJA::forall<POLICY_I>(is_i, [=](Index_type i){
      exec(is_j, is_k, is_l, is_m, [=](Index_type j, Index_type k, Index_type l, Index_type m){
        body(i, j, k, l, m);
      });
    });
  }

  private:
    Forall4Executor<POLICY_J, POLICY_K, POLICY_L, POLICY_M, TJ, TK, TL, TM> exec;
};


/******************************************************************
 *  OpenMP Auto-Collapsing Executors for forall5()
 ******************************************************************/

#ifdef _OPENMP

// OpenMP Executor with collapse(2) for omp_parallel_for_exec
template<typename POLICY_K, typename POLICY_L, typename POLICY_M, typename TK, typename TL, typename TM>
class Forall5Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, POLICY_K, POLICY_L, POLICY_M, RAJA::RangeSegment, RAJA::RangeSegment, TK, TL, TM> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

#pragma omp parallel for schedule(static) collapse(2)
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          exec(is_k, is_l, is_m, [=](Index_type k, Index_type l, Index_type m){
            body(i, j, k, l, m);
          });
      } } 
    }

  private:
    Forall3Executor<POLICY_K, POLICY_L, POLICY_M, TK, TL, TM> exec;
};

// OpenMP Executor with collapse(3) for omp_parallel_for_exec
template<typename POLICY_L, typename POLICY_M, typename TL, typename TM>
class Forall5Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, POLICY_L, POLICY_M, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, TL, TM> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, TL const &is_l, TM const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

      Index_type const k_start = is_k.getBegin();
      Index_type const k_end   = is_k.getEnd();

#pragma omp parallel for schedule(static) collapse(3)
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          for(Index_type k = k_start;k < k_end;++ k){
            exec(is_l, is_m, [=](Index_type l, Index_type m){
              body(i, j, k, l, m);
            });
      } } } 
    }

  private:
    Forall2Executor<POLICY_L, POLICY_M, TL, TM> exec;
};

// OpenMP Executor with collapse(4) for omp_parallel_for_exec
template<typename POLICY_M, typename TM>
class Forall5Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, POLICY_M, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, TM> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, RAJA::RangeSegment const &is_l, TM const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

      Index_type const k_start = is_k.getBegin();
      Index_type const k_end   = is_k.getEnd();

      Index_type const l_start = is_l.getBegin();
      Index_type const l_end   = is_l.getEnd();

#pragma omp parallel for schedule(static) collapse(4)
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          for(Index_type k = k_start;k < k_end;++ k){
            for(Index_type l = l_start;l < l_end;++ l){
              RAJA::forall<POLICY_M>(is_m, [=](Index_type m){
                body(i, j, k, l, m);
              });
      } } } } 
    }
};

// OpenMP Executor with collapse(5) for omp_parallel_for_exec
template<>
class Forall5Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, RAJA::RangeSegment const &is_l, RAJA::RangeSegment const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

      Index_type const k_start = is_k.getBegin();
      Index_type const k_end   = is_k.getEnd();

      Index_type const l_start = is_l.getBegin();
      Index_type const l_end   = is_l.getEnd();

      Index_type const m_start = is_m.getBegin();
      Index_type const m_end   = is_m.getEnd();

#pragma omp parallel for schedule(static) collapse(5)
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          for(Index_type k = k_start;k < k_end;++ k){
            for(Index_type l = l_start;l < l_end;++ l){
              for(Index_type m = m_start;m < m_end;++ m){
                body(i, j, k, l, m);
      } } } } } 
    }
};

// OpenMP Executor with collapse(2) for omp_for_nowait_exec
template<typename POLICY_K, typename POLICY_L, typename POLICY_M, typename TK, typename TL, typename TM>
class Forall5Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, POLICY_K, POLICY_L, POLICY_M, RAJA::RangeSegment, RAJA::RangeSegment, TK, TL, TM> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

#pragma omp for schedule(static) collapse(2) nowait
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          exec(is_k, is_l, is_m, [=](Index_type k, Index_type l, Index_type m){
            body(i, j, k, l, m);
          });
      } } 
    }

  private:
    Forall3Executor<POLICY_K, POLICY_L, POLICY_M, TK, TL, TM> exec;
};

// OpenMP Executor with collapse(3) for omp_for_nowait_exec
template<typename POLICY_L, typename POLICY_M, typename TL, typename TM>
class Forall5Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, POLICY_L, POLICY_M, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, TL, TM> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, TL const &is_l, TM const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

      Index_type const k_start = is_k.getBegin();
      Index_type const k_end   = is_k.getEnd();

#pragma omp for schedule(static) collapse(3) nowait
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          for(Index_type k = k_start;k < k_end;++ k){
            exec(is_l, is_m, [=](Index_type l, Index_type m){
              body(i, j, k, l, m);
            });
      } } } 
    }

  private:
    Forall2Executor<POLICY_L, POLICY_M, TL, TM> exec;
};

// OpenMP Executor with collapse(4) for omp_for_nowait_exec
template<typename POLICY_M, typename TM>
class Forall5Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, POLICY_M, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, TM> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, RAJA::RangeSegment const &is_l, TM const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

      Index_type const k_start = is_k.getBegin();
      Index_type const k_end   = is_k.getEnd();

      Index_type const l_start = is_l.getBegin();
      Index_type const l_end   = is_l.getEnd();

#pragma omp for schedule(static) collapse(4) nowait
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          for(Index_type k = k_start;k < k_end;++ k){
            for(Index_type l = l_start;l < l_end;++ l){
              RAJA::forall<POLICY_M>(is_m, [=](Index_type m){
                body(i, j, k, l, m);
              });
      } } } } 
    }
};

// OpenMP Executor with collapse(5) for omp_for_nowait_exec
template<>
class Forall5Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment, RAJA::RangeSegment> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, RAJA::RangeSegment const &is_k, RAJA::RangeSegment const &is_l, RAJA::RangeSegment const &is_m, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

      Index_type const k_start = is_k.getBegin();
      Index_type const k_end   = is_k.getEnd();

      Index_type const l_start = is_l.getBegin();
      Index_type const l_end   = is_l.getEnd();

      Index_type const m_start = is_m.getBegin();
      Index_type const m_end   = is_m.getEnd();

#pragma omp for schedule(static) collapse(5) nowait
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          for(Index_type k = k_start;k < k_end;++ k){
            for(Index_type l = l_start;l < l_end;++ l){
              for(Index_type m = m_start;m < m_end;++ m){
                body(i, j, k, l, m);
      } } } } } 
    }
};


#endif // _OPENMP


/******************************************************************
 *  forall5_permute(): Permutation function overloads
 ******************************************************************/

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJKLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_i, is_j, is_k, is_l, is_m,
    [=](Index_type i, Index_type j, Index_type k, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJKML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyM, PolicyL>(NextPolicyTag(), is_i, is_j, is_k, is_m, is_l,
    [=](Index_type i, Index_type j, Index_type k, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJLKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyL, PolicyK, PolicyM>(NextPolicyTag(), is_i, is_j, is_l, is_k, is_m,
    [=](Index_type i, Index_type j, Index_type l, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJLMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyL, PolicyM, PolicyK>(NextPolicyTag(), is_i, is_j, is_l, is_m, is_k,
    [=](Index_type i, Index_type j, Index_type l, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJMKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyM, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_j, is_m, is_k, is_l,
    [=](Index_type i, Index_type j, Index_type m, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJMLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyM, PolicyL, PolicyK>(NextPolicyTag(), is_i, is_j, is_m, is_l, is_k,
    [=](Index_type i, Index_type j, Index_type m, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKJLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyJ, PolicyL, PolicyM>(NextPolicyTag(), is_i, is_k, is_j, is_l, is_m,
    [=](Index_type i, Index_type k, Index_type j, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKJML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyJ, PolicyM, PolicyL>(NextPolicyTag(), is_i, is_k, is_j, is_m, is_l,
    [=](Index_type i, Index_type k, Index_type j, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKLJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyL, PolicyJ, PolicyM>(NextPolicyTag(), is_i, is_k, is_l, is_j, is_m,
    [=](Index_type i, Index_type k, Index_type l, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKLMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyL, PolicyM, PolicyJ>(NextPolicyTag(), is_i, is_k, is_l, is_m, is_j,
    [=](Index_type i, Index_type k, Index_type l, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKMJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyM, PolicyJ, PolicyL>(NextPolicyTag(), is_i, is_k, is_m, is_j, is_l,
    [=](Index_type i, Index_type k, Index_type m, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKMLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyM, PolicyL, PolicyJ>(NextPolicyTag(), is_i, is_k, is_m, is_l, is_j,
    [=](Index_type i, Index_type k, Index_type m, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILJKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyJ, PolicyK, PolicyM>(NextPolicyTag(), is_i, is_l, is_j, is_k, is_m,
    [=](Index_type i, Index_type l, Index_type j, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILJMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyJ, PolicyM, PolicyK>(NextPolicyTag(), is_i, is_l, is_j, is_m, is_k,
    [=](Index_type i, Index_type l, Index_type j, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILKJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyK, PolicyJ, PolicyM>(NextPolicyTag(), is_i, is_l, is_k, is_j, is_m,
    [=](Index_type i, Index_type l, Index_type k, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILKMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyK, PolicyM, PolicyJ>(NextPolicyTag(), is_i, is_l, is_k, is_m, is_j,
    [=](Index_type i, Index_type l, Index_type k, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILMJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyM, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_l, is_m, is_j, is_k,
    [=](Index_type i, Index_type l, Index_type m, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILMKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyM, PolicyK, PolicyJ>(NextPolicyTag(), is_i, is_l, is_m, is_k, is_j,
    [=](Index_type i, Index_type l, Index_type m, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMJKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_m, is_j, is_k, is_l,
    [=](Index_type i, Index_type m, Index_type j, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMJLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyJ, PolicyL, PolicyK>(NextPolicyTag(), is_i, is_m, is_j, is_l, is_k,
    [=](Index_type i, Index_type m, Index_type j, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMKJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyK, PolicyJ, PolicyL>(NextPolicyTag(), is_i, is_m, is_k, is_j, is_l,
    [=](Index_type i, Index_type m, Index_type k, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMKLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyK, PolicyL, PolicyJ>(NextPolicyTag(), is_i, is_m, is_k, is_l, is_j,
    [=](Index_type i, Index_type m, Index_type k, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMLJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyL, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_m, is_l, is_j, is_k,
    [=](Index_type i, Index_type m, Index_type l, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMLKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyL, PolicyK, PolicyJ>(NextPolicyTag(), is_i, is_m, is_l, is_k, is_j,
    [=](Index_type i, Index_type m, Index_type l, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIKLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_j, is_i, is_k, is_l, is_m,
    [=](Index_type j, Index_type i, Index_type k, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIKML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyK, PolicyM, PolicyL>(NextPolicyTag(), is_j, is_i, is_k, is_m, is_l,
    [=](Index_type j, Index_type i, Index_type k, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JILKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyL, PolicyK, PolicyM>(NextPolicyTag(), is_j, is_i, is_l, is_k, is_m,
    [=](Index_type j, Index_type i, Index_type l, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JILMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyL, PolicyM, PolicyK>(NextPolicyTag(), is_j, is_i, is_l, is_m, is_k,
    [=](Index_type j, Index_type i, Index_type l, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIMKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyM, PolicyK, PolicyL>(NextPolicyTag(), is_j, is_i, is_m, is_k, is_l,
    [=](Index_type j, Index_type i, Index_type m, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIMLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyM, PolicyL, PolicyK>(NextPolicyTag(), is_j, is_i, is_m, is_l, is_k,
    [=](Index_type j, Index_type i, Index_type m, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKILM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyI, PolicyL, PolicyM>(NextPolicyTag(), is_j, is_k, is_i, is_l, is_m,
    [=](Index_type j, Index_type k, Index_type i, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKIML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyI, PolicyM, PolicyL>(NextPolicyTag(), is_j, is_k, is_i, is_m, is_l,
    [=](Index_type j, Index_type k, Index_type i, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKLIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyL, PolicyI, PolicyM>(NextPolicyTag(), is_j, is_k, is_l, is_i, is_m,
    [=](Index_type j, Index_type k, Index_type l, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKLMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyL, PolicyM, PolicyI>(NextPolicyTag(), is_j, is_k, is_l, is_m, is_i,
    [=](Index_type j, Index_type k, Index_type l, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKMIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyM, PolicyI, PolicyL>(NextPolicyTag(), is_j, is_k, is_m, is_i, is_l,
    [=](Index_type j, Index_type k, Index_type m, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKMLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyM, PolicyL, PolicyI>(NextPolicyTag(), is_j, is_k, is_m, is_l, is_i,
    [=](Index_type j, Index_type k, Index_type m, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLIKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyI, PolicyK, PolicyM>(NextPolicyTag(), is_j, is_l, is_i, is_k, is_m,
    [=](Index_type j, Index_type l, Index_type i, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLIMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyI, PolicyM, PolicyK>(NextPolicyTag(), is_j, is_l, is_i, is_m, is_k,
    [=](Index_type j, Index_type l, Index_type i, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLKIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyK, PolicyI, PolicyM>(NextPolicyTag(), is_j, is_l, is_k, is_i, is_m,
    [=](Index_type j, Index_type l, Index_type k, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLKMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyK, PolicyM, PolicyI>(NextPolicyTag(), is_j, is_l, is_k, is_m, is_i,
    [=](Index_type j, Index_type l, Index_type k, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLMIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyM, PolicyI, PolicyK>(NextPolicyTag(), is_j, is_l, is_m, is_i, is_k,
    [=](Index_type j, Index_type l, Index_type m, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLMKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyM, PolicyK, PolicyI>(NextPolicyTag(), is_j, is_l, is_m, is_k, is_i,
    [=](Index_type j, Index_type l, Index_type m, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMIKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyI, PolicyK, PolicyL>(NextPolicyTag(), is_j, is_m, is_i, is_k, is_l,
    [=](Index_type j, Index_type m, Index_type i, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMILK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyI, PolicyL, PolicyK>(NextPolicyTag(), is_j, is_m, is_i, is_l, is_k,
    [=](Index_type j, Index_type m, Index_type i, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMKIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyK, PolicyI, PolicyL>(NextPolicyTag(), is_j, is_m, is_k, is_i, is_l,
    [=](Index_type j, Index_type m, Index_type k, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMKLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyK, PolicyL, PolicyI>(NextPolicyTag(), is_j, is_m, is_k, is_l, is_i,
    [=](Index_type j, Index_type m, Index_type k, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMLIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyL, PolicyI, PolicyK>(NextPolicyTag(), is_j, is_m, is_l, is_i, is_k,
    [=](Index_type j, Index_type m, Index_type l, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMLKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyL, PolicyK, PolicyI>(NextPolicyTag(), is_j, is_m, is_l, is_k, is_i,
    [=](Index_type j, Index_type m, Index_type l, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIJLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyJ, PolicyL, PolicyM>(NextPolicyTag(), is_k, is_i, is_j, is_l, is_m,
    [=](Index_type k, Index_type i, Index_type j, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIJML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyJ, PolicyM, PolicyL>(NextPolicyTag(), is_k, is_i, is_j, is_m, is_l,
    [=](Index_type k, Index_type i, Index_type j, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KILJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyL, PolicyJ, PolicyM>(NextPolicyTag(), is_k, is_i, is_l, is_j, is_m,
    [=](Index_type k, Index_type i, Index_type l, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KILMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyL, PolicyM, PolicyJ>(NextPolicyTag(), is_k, is_i, is_l, is_m, is_j,
    [=](Index_type k, Index_type i, Index_type l, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIMJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyM, PolicyJ, PolicyL>(NextPolicyTag(), is_k, is_i, is_m, is_j, is_l,
    [=](Index_type k, Index_type i, Index_type m, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIMLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyM, PolicyL, PolicyJ>(NextPolicyTag(), is_k, is_i, is_m, is_l, is_j,
    [=](Index_type k, Index_type i, Index_type m, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJILM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyI, PolicyL, PolicyM>(NextPolicyTag(), is_k, is_j, is_i, is_l, is_m,
    [=](Index_type k, Index_type j, Index_type i, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJIML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyI, PolicyM, PolicyL>(NextPolicyTag(), is_k, is_j, is_i, is_m, is_l,
    [=](Index_type k, Index_type j, Index_type i, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJLIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyL, PolicyI, PolicyM>(NextPolicyTag(), is_k, is_j, is_l, is_i, is_m,
    [=](Index_type k, Index_type j, Index_type l, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJLMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyL, PolicyM, PolicyI>(NextPolicyTag(), is_k, is_j, is_l, is_m, is_i,
    [=](Index_type k, Index_type j, Index_type l, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJMIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyM, PolicyI, PolicyL>(NextPolicyTag(), is_k, is_j, is_m, is_i, is_l,
    [=](Index_type k, Index_type j, Index_type m, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJMLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyM, PolicyL, PolicyI>(NextPolicyTag(), is_k, is_j, is_m, is_l, is_i,
    [=](Index_type k, Index_type j, Index_type m, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLIJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyI, PolicyJ, PolicyM>(NextPolicyTag(), is_k, is_l, is_i, is_j, is_m,
    [=](Index_type k, Index_type l, Index_type i, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLIMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyI, PolicyM, PolicyJ>(NextPolicyTag(), is_k, is_l, is_i, is_m, is_j,
    [=](Index_type k, Index_type l, Index_type i, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLJIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyJ, PolicyI, PolicyM>(NextPolicyTag(), is_k, is_l, is_j, is_i, is_m,
    [=](Index_type k, Index_type l, Index_type j, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLJMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyJ, PolicyM, PolicyI>(NextPolicyTag(), is_k, is_l, is_j, is_m, is_i,
    [=](Index_type k, Index_type l, Index_type j, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLMIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyM, PolicyI, PolicyJ>(NextPolicyTag(), is_k, is_l, is_m, is_i, is_j,
    [=](Index_type k, Index_type l, Index_type m, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLMJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyM, PolicyJ, PolicyI>(NextPolicyTag(), is_k, is_l, is_m, is_j, is_i,
    [=](Index_type k, Index_type l, Index_type m, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMIJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyI, PolicyJ, PolicyL>(NextPolicyTag(), is_k, is_m, is_i, is_j, is_l,
    [=](Index_type k, Index_type m, Index_type i, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMILJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyI, PolicyL, PolicyJ>(NextPolicyTag(), is_k, is_m, is_i, is_l, is_j,
    [=](Index_type k, Index_type m, Index_type i, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMJIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyJ, PolicyI, PolicyL>(NextPolicyTag(), is_k, is_m, is_j, is_i, is_l,
    [=](Index_type k, Index_type m, Index_type j, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMJLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyJ, PolicyL, PolicyI>(NextPolicyTag(), is_k, is_m, is_j, is_l, is_i,
    [=](Index_type k, Index_type m, Index_type j, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMLIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyL, PolicyI, PolicyJ>(NextPolicyTag(), is_k, is_m, is_l, is_i, is_j,
    [=](Index_type k, Index_type m, Index_type l, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMLJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyL, PolicyJ, PolicyI>(NextPolicyTag(), is_k, is_m, is_l, is_j, is_i,
    [=](Index_type k, Index_type m, Index_type l, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIJKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyJ, PolicyK, PolicyM>(NextPolicyTag(), is_l, is_i, is_j, is_k, is_m,
    [=](Index_type l, Index_type i, Index_type j, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIJMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyJ, PolicyM, PolicyK>(NextPolicyTag(), is_l, is_i, is_j, is_m, is_k,
    [=](Index_type l, Index_type i, Index_type j, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIKJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyK, PolicyJ, PolicyM>(NextPolicyTag(), is_l, is_i, is_k, is_j, is_m,
    [=](Index_type l, Index_type i, Index_type k, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIKMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyK, PolicyM, PolicyJ>(NextPolicyTag(), is_l, is_i, is_k, is_m, is_j,
    [=](Index_type l, Index_type i, Index_type k, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIMJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyM, PolicyJ, PolicyK>(NextPolicyTag(), is_l, is_i, is_m, is_j, is_k,
    [=](Index_type l, Index_type i, Index_type m, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIMKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyM, PolicyK, PolicyJ>(NextPolicyTag(), is_l, is_i, is_m, is_k, is_j,
    [=](Index_type l, Index_type i, Index_type m, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJIKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyI, PolicyK, PolicyM>(NextPolicyTag(), is_l, is_j, is_i, is_k, is_m,
    [=](Index_type l, Index_type j, Index_type i, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJIMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyI, PolicyM, PolicyK>(NextPolicyTag(), is_l, is_j, is_i, is_m, is_k,
    [=](Index_type l, Index_type j, Index_type i, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJKIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyK, PolicyI, PolicyM>(NextPolicyTag(), is_l, is_j, is_k, is_i, is_m,
    [=](Index_type l, Index_type j, Index_type k, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJKMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyK, PolicyM, PolicyI>(NextPolicyTag(), is_l, is_j, is_k, is_m, is_i,
    [=](Index_type l, Index_type j, Index_type k, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJMIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyM, PolicyI, PolicyK>(NextPolicyTag(), is_l, is_j, is_m, is_i, is_k,
    [=](Index_type l, Index_type j, Index_type m, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJMKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyM, PolicyK, PolicyI>(NextPolicyTag(), is_l, is_j, is_m, is_k, is_i,
    [=](Index_type l, Index_type j, Index_type m, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKIJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyI, PolicyJ, PolicyM>(NextPolicyTag(), is_l, is_k, is_i, is_j, is_m,
    [=](Index_type l, Index_type k, Index_type i, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKIMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyI, PolicyM, PolicyJ>(NextPolicyTag(), is_l, is_k, is_i, is_m, is_j,
    [=](Index_type l, Index_type k, Index_type i, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKJIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyJ, PolicyI, PolicyM>(NextPolicyTag(), is_l, is_k, is_j, is_i, is_m,
    [=](Index_type l, Index_type k, Index_type j, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKJMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyJ, PolicyM, PolicyI>(NextPolicyTag(), is_l, is_k, is_j, is_m, is_i,
    [=](Index_type l, Index_type k, Index_type j, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKMIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyM, PolicyI, PolicyJ>(NextPolicyTag(), is_l, is_k, is_m, is_i, is_j,
    [=](Index_type l, Index_type k, Index_type m, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKMJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyM, PolicyJ, PolicyI>(NextPolicyTag(), is_l, is_k, is_m, is_j, is_i,
    [=](Index_type l, Index_type k, Index_type m, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMIJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_l, is_m, is_i, is_j, is_k,
    [=](Index_type l, Index_type m, Index_type i, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMIKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyI, PolicyK, PolicyJ>(NextPolicyTag(), is_l, is_m, is_i, is_k, is_j,
    [=](Index_type l, Index_type m, Index_type i, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMJIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyJ, PolicyI, PolicyK>(NextPolicyTag(), is_l, is_m, is_j, is_i, is_k,
    [=](Index_type l, Index_type m, Index_type j, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMJKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyJ, PolicyK, PolicyI>(NextPolicyTag(), is_l, is_m, is_j, is_k, is_i,
    [=](Index_type l, Index_type m, Index_type j, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMKIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyK, PolicyI, PolicyJ>(NextPolicyTag(), is_l, is_m, is_k, is_i, is_j,
    [=](Index_type l, Index_type m, Index_type k, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMKJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyK, PolicyJ, PolicyI>(NextPolicyTag(), is_l, is_m, is_k, is_j, is_i,
    [=](Index_type l, Index_type m, Index_type k, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIJKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_m, is_i, is_j, is_k, is_l,
    [=](Index_type m, Index_type i, Index_type j, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIJLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyJ, PolicyL, PolicyK>(NextPolicyTag(), is_m, is_i, is_j, is_l, is_k,
    [=](Index_type m, Index_type i, Index_type j, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIKJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyK, PolicyJ, PolicyL>(NextPolicyTag(), is_m, is_i, is_k, is_j, is_l,
    [=](Index_type m, Index_type i, Index_type k, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIKLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyK, PolicyL, PolicyJ>(NextPolicyTag(), is_m, is_i, is_k, is_l, is_j,
    [=](Index_type m, Index_type i, Index_type k, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MILJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyL, PolicyJ, PolicyK>(NextPolicyTag(), is_m, is_i, is_l, is_j, is_k,
    [=](Index_type m, Index_type i, Index_type l, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MILKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyL, PolicyK, PolicyJ>(NextPolicyTag(), is_m, is_i, is_l, is_k, is_j,
    [=](Index_type m, Index_type i, Index_type l, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJIKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyI, PolicyK, PolicyL>(NextPolicyTag(), is_m, is_j, is_i, is_k, is_l,
    [=](Index_type m, Index_type j, Index_type i, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJILK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyI, PolicyL, PolicyK>(NextPolicyTag(), is_m, is_j, is_i, is_l, is_k,
    [=](Index_type m, Index_type j, Index_type i, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJKIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyK, PolicyI, PolicyL>(NextPolicyTag(), is_m, is_j, is_k, is_i, is_l,
    [=](Index_type m, Index_type j, Index_type k, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJKLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyK, PolicyL, PolicyI>(NextPolicyTag(), is_m, is_j, is_k, is_l, is_i,
    [=](Index_type m, Index_type j, Index_type k, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJLIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyL, PolicyI, PolicyK>(NextPolicyTag(), is_m, is_j, is_l, is_i, is_k,
    [=](Index_type m, Index_type j, Index_type l, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJLKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyL, PolicyK, PolicyI>(NextPolicyTag(), is_m, is_j, is_l, is_k, is_i,
    [=](Index_type m, Index_type j, Index_type l, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKIJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyI, PolicyJ, PolicyL>(NextPolicyTag(), is_m, is_k, is_i, is_j, is_l,
    [=](Index_type m, Index_type k, Index_type i, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKILJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyI, PolicyL, PolicyJ>(NextPolicyTag(), is_m, is_k, is_i, is_l, is_j,
    [=](Index_type m, Index_type k, Index_type i, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKJIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyJ, PolicyI, PolicyL>(NextPolicyTag(), is_m, is_k, is_j, is_i, is_l,
    [=](Index_type m, Index_type k, Index_type j, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKJLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyJ, PolicyL, PolicyI>(NextPolicyTag(), is_m, is_k, is_j, is_l, is_i,
    [=](Index_type m, Index_type k, Index_type j, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKLIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyL, PolicyI, PolicyJ>(NextPolicyTag(), is_m, is_k, is_l, is_i, is_j,
    [=](Index_type m, Index_type k, Index_type l, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKLJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyL, PolicyJ, PolicyI>(NextPolicyTag(), is_m, is_k, is_l, is_j, is_i,
    [=](Index_type m, Index_type k, Index_type l, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLIJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_m, is_l, is_i, is_j, is_k,
    [=](Index_type m, Index_type l, Index_type i, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLIKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyI, PolicyK, PolicyJ>(NextPolicyTag(), is_m, is_l, is_i, is_k, is_j,
    [=](Index_type m, Index_type l, Index_type i, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLJIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyJ, PolicyI, PolicyK>(NextPolicyTag(), is_m, is_l, is_j, is_i, is_k,
    [=](Index_type m, Index_type l, Index_type j, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLJKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyJ, PolicyK, PolicyI>(NextPolicyTag(), is_m, is_l, is_j, is_k, is_i,
    [=](Index_type m, Index_type l, Index_type j, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLKIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyK, PolicyI, PolicyJ>(NextPolicyTag(), is_m, is_l, is_k, is_i, is_j,
    [=](Index_type m, Index_type l, Index_type k, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLKJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyK, PolicyJ, PolicyI>(NextPolicyTag(), is_m, is_l, is_k, is_j, is_i,
    [=](Index_type m, Index_type l, Index_type k, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}


/******************************************************************
 *  forall5_policy() Policy Layer, specializations for policy tags
 ******************************************************************/


/*!
 * \brief Execute inner loops policy function.
 *
 * This is the default termination case.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Execute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){

  // Create executor object to launch loops
  Forall5Executor<PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM, TI, TJ, TK, TL, TM> exec;

  // Launch loop body
  exec(is_i, is_j, is_k, is_l, is_m, body);
}


/*!
 * \brief Permutation policy function, providing loop interchange.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Permute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  // Get the loop permutation
  typedef typename POLICY::LoopOrder LoopOrder;

  // Call loop interchange overload to re-wrire indicies and policies
  forall5_permute<POLICY, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(LoopOrder(), is_i, is_j, is_k, is_l, is_m, body);
}


/*!
 * \brief OpenMP Parallel Region Section policy function.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // create OpenMP Parallel Region
#ifdef _OPENMP
#pragma omp parallel
#endif
  {
    // execute the next policy
    forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_i, is_j, is_k, is_l, is_m, body);
  }
}


/*!
 * \brief Tiling policy function.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Tile_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
  typedef typename POLICY::TileI TileI;
  typedef typename POLICY::TileJ TileJ;
  typedef typename POLICY::TileK TileK;
  typedef typename POLICY::TileL TileL;
  typedef typename POLICY::TileM TileM;

  // execute the next policy
      forall_tile(TileI(), is_i, [=](RAJA::RangeSegment is_ii){
        forall_tile(TileJ(), is_j, [=](RAJA::RangeSegment is_jj){
          forall_tile(TileK(), is_k, [=](RAJA::RangeSegment is_kk){
            forall_tile(TileL(), is_l, [=](RAJA::RangeSegment is_ll){
              forall_tile(TileM(), is_m, [=](RAJA::RangeSegment is_mm){
            forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_ii, is_jj, is_kk, is_ll, is_mm, body);
              });
            });
          });
        });
      });
}



/******************************************************************
 *  forall5 User API
 ******************************************************************/

/*!
 * \brief Provides abstraction of a 5-nested loop
 *
 * Provides index typing, and initial nested policy unwrapping
 */

template<typename POLICY, typename IdxI=Index_type, typename IdxJ=Index_type, typename IdxK=Index_type, typename IdxL=Index_type, typename IdxM=Index_type, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5(TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  // extract next policy
  typedef typename POLICY::NextPolicy             NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag  NextPolicyTag;

  // extract each loop's execution policy
  typedef typename POLICY::PolicyI                PolicyI;
  typedef typename POLICY::PolicyJ                PolicyJ;
  typedef typename POLICY::PolicyK                PolicyK;
  typedef typename POLICY::PolicyL                PolicyL;
  typedef typename POLICY::PolicyM                PolicyM;

  // call 'policy' layer with next policy
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_i, is_j, is_k, is_l, is_m, 
    [=](Index_type i, Index_type j, Index_type k, Index_type l, Index_type m){
      body(IdxI(i), IdxJ(j), IdxK(k), IdxL(l), IdxM(m));
    }
  );
}



} // namespace RAJA
  
#endif


//AUTOGENERATED BY genForallN.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_DOMAIN_FORALL2_HXX__
#define RAJA_DOMAIN_FORALL2_HXX__

#include<RAJA/RAJA.hxx>
#include<RAJA/Tile.hxx>

namespace RAJA {



/******************************************************************
 *  Policy base class, forall2()
 ******************************************************************/

// Execute (Termination default)
struct Forall2_Execute_Tag {};
struct Forall2_Execute {
  typedef Forall2_Execute_Tag PolicyTag;
};

// Starting (outer) policy for all forall2 policies
template<typename POL_I=RAJA::seq_exec, typename POL_J=RAJA::seq_exec, typename NEXT=Forall2_Execute>
struct Forall2_Policy {
  typedef NEXT NextPolicy;
  typedef POL_I PolicyI;
  typedef POL_J PolicyJ;
};

// Interchange loop order given permutation
struct Forall2_Permute_Tag {};
template<typename LOOP_ORDER, typename NEXT=Forall2_Execute>
struct Forall2_Permute {
  typedef Forall2_Permute_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef LOOP_ORDER LoopOrder;
};

// Begin OpenMP Parallel Region
struct Forall2_OMP_Parallel_Tag {};
template<typename NEXT=Forall2_Execute>
struct Forall2_OMP_Parallel {
  typedef Forall2_OMP_Parallel_Tag PolicyTag;
  typedef NEXT NextPolicy;
};

// Tiling Policy
struct Forall2_Tile_Tag {};
template<typename TILE_I, typename TILE_J, typename NEXT=Forall2_Execute>
struct Forall2_Tile {
  typedef Forall2_Tile_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef TILE_I TileI;
  typedef TILE_J TileJ;
};


/******************************************************************
 *  forall2_policy() Foreward declarations
 ******************************************************************/

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Execute_Tag, TI const &is_i, TJ const &is_j, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Permute_Tag, TI const &is_i, TJ const &is_j, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, BODY body);

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Tile_Tag, TI const &is_i, TJ const &is_j, BODY body);


/******************************************************************
 *  Forall2Executor(): Default Executor for loops
 ******************************************************************/

template<typename POLICY_I, typename POLICY_J, typename TI, typename TJ>
struct Forall2Executor {
  template<typename BODY>
  inline void operator()(TI const &is_i, TJ const &is_j, BODY body) const {
    RAJA::forall<POLICY_I>(is_i, [=](Index_type i){
      RAJA::forall<POLICY_J>(is_j, [=](Index_type j){
        body(i, j);
      });
    });
  }
};


/******************************************************************
 *  OpenMP Auto-Collapsing Executors for forall2()
 ******************************************************************/

#ifdef _OPENMP

// OpenMP Executor with collapse(2) for omp_parallel_for_exec
template<>
class Forall2Executor<RAJA::omp_parallel_for_exec, RAJA::omp_parallel_for_exec, RAJA::RangeSegment, RAJA::RangeSegment> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

#pragma omp parallel for schedule(static) collapse(2)
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          body(i, j);
      } } 
    }
};

// OpenMP Executor with collapse(2) for omp_for_nowait_exec
template<>
class Forall2Executor<RAJA::omp_for_nowait_exec, RAJA::omp_for_nowait_exec, RAJA::RangeSegment, RAJA::RangeSegment> {
  public:  
    template<typename BODY>
    inline void operator()(RAJA::RangeSegment const &is_i, RAJA::RangeSegment const &is_j, BODY body) const {
      Index_type const i_start = is_i.getBegin();
      Index_type const i_end   = is_i.getEnd();

      Index_type const j_start = is_j.getBegin();
      Index_type const j_end   = is_j.getEnd();

#pragma omp for schedule(static) collapse(2) nowait
      for(Index_type i = i_start;i < i_end;++ i){
        for(Index_type j = j_start;j < j_end;++ j){
          body(i, j);
      } } 
    }
};


#endif // _OPENMP


/******************************************************************
 *  forall2_permute(): Permutation function overloads
 ******************************************************************/

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_permute(PERM_IJ, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_i, is_j,
    [=](Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_permute(PERM_JI, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall2_policy<NextPolicy, PolicyJ, PolicyI>(NextPolicyTag(), is_j, is_i,
    [=](Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j);
    });
}


/******************************************************************
 *  forall2_policy() Policy Layer, specializations for policy tags
 ******************************************************************/


/*!
 * \brief Execute inner loops policy function.
 *
 * This is the default termination case.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Execute_Tag, TI const &is_i, TJ const &is_j, BODY body){

  // Create executor object to launch loops
  Forall2Executor<PolicyI, PolicyJ, TI, TJ> exec;

  // Launch loop body
  exec(is_i, is_j, body);
}


/*!
 * \brief Permutation policy function, providing loop interchange.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Permute_Tag, TI const &is_i, TJ const &is_j, BODY body){
  // Get the loop permutation
  typedef typename POLICY::LoopOrder LoopOrder;

  // Call loop interchange overload to re-wrire indicies and policies
  forall2_permute<POLICY, PolicyI, PolicyJ>(LoopOrder(), is_i, is_j, body);
}


/*!
 * \brief OpenMP Parallel Region Section policy function.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_OMP_Parallel_Tag, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // create OpenMP Parallel Region
#ifdef _OPENMP
#pragma omp parallel
#endif
  {
    // execute the next policy
    forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_i, is_j, body);
  }
}


/*!
 * \brief Tiling policy function.
 */
    template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Tile_Tag, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;
  typedef typename POLICY::TileI TileI;
  typedef typename POLICY::TileJ TileJ;

  // execute the next policy
      forall_tile(TileI(), is_i, [=](RAJA::RangeSegment is_ii){
        forall_tile(TileJ(), is_j, [=](RAJA::RangeSegment is_jj){
      forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_ii, is_jj, body);
        });
      });
}



/******************************************************************
 *  forall2 User API
 ******************************************************************/

/*!
 * \brief Provides abstraction of a 2-nested loop
 *
 * Provides index typing, and initial nested policy unwrapping
 */

template<typename POLICY, typename IdxI=Index_type, typename IdxJ=Index_type, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2(TI const &is_i, TJ const &is_j, BODY body){
  // extract next policy
  typedef typename POLICY::NextPolicy             NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag  NextPolicyTag;

  // extract each loop's execution policy
  typedef typename POLICY::PolicyI                PolicyI;
  typedef typename POLICY::PolicyJ                PolicyJ;

  // call 'policy' layer with next policy
  forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_i, is_j, 
    [=](Index_type i, Index_type j){
      body(IdxI(i), IdxJ(j));
    }
  );
}



} // namespace RAJA
  
#endif


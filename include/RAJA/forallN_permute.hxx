//AUTOGENERATED BY gen_forallN_generic.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_forallN_permute_HXX__
#define RAJA_forallN_permute_HXX__

#include "forallN_permute_lf.hxx"

namespace RAJA {



/******************************************************************
 *  ForallN loop interchange policies
 ******************************************************************/



template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJ, BODY>{
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}
  
  inline void RAJA_HOST_DEVICE operator()(Index_type i, Index_type j) const {
    body(i,j);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj);
  }
  
  BODY body;
};

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JI, BODY>{
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}
  inline void RAJA_HOST_DEVICE operator()(Index_type i, Index_type j) const {
    body(j,i);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi);
  }
  
  BODY body;
};



} // namespace RAJA
  
#endif


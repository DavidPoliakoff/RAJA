//AUTOGENERATED BY gen_forallN_generic.py
/*
 * Copyright (c) 2016, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 *
 * All rights reserved.
 *
 * This source code cannot be distributed without permission and
 * further review from Lawrence Livermore National Laboratory.
 */
  
#ifndef RAJA_forallN_permute_HXX__
#define RAJA_forallN_permute_HXX__

#include"config.hxx"
#include"int_datatypes.hxx"

namespace RAJA {



/******************************************************************
 *  ForallN loop interchange policies
 ******************************************************************/

// Interchange loop order given permutation
struct Forall2_Permute_Tag {};
template<typename LOOP_ORDER, typename NEXT=Forall2_Execute>
struct Forall2_Permute {
  typedef Forall2_Permute_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef LOOP_ORDER LoopOrder;
};

// Interchange loop order given permutation
struct Forall3_Permute_Tag {};
template<typename LOOP_ORDER, typename NEXT=Forall3_Execute>
struct Forall3_Permute {
  typedef Forall3_Permute_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef LOOP_ORDER LoopOrder;
};

// Interchange loop order given permutation
struct Forall4_Permute_Tag {};
template<typename LOOP_ORDER, typename NEXT=Forall4_Execute>
struct Forall4_Permute {
  typedef Forall4_Permute_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef LOOP_ORDER LoopOrder;
};

// Interchange loop order given permutation
struct Forall5_Permute_Tag {};
template<typename LOOP_ORDER, typename NEXT=Forall5_Execute>
struct Forall5_Permute {
  typedef Forall5_Permute_Tag PolicyTag;
  typedef NEXT NextPolicy;
  typedef LOOP_ORDER LoopOrder;
};


/******************************************************************
 *  ForallN loop interchange policies
 ******************************************************************/

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_permute(PERM_IJ, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall2_policy<NextPolicy, PolicyI, PolicyJ>(NextPolicyTag(), is_i, is_j,
    [=](Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_permute(PERM_JI, TI const &is_i, TJ const &is_j, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall2_policy<NextPolicy, PolicyJ, PolicyI>(NextPolicyTag(), is_j, is_i,
    [=](Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_permute(PERM_IJK, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall3_policy<NextPolicy, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_j, is_k,
    [=](Index_type i, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_permute(PERM_IKJ, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall3_policy<NextPolicy, PolicyI, PolicyK, PolicyJ>(NextPolicyTag(), is_i, is_k, is_j,
    [=](Index_type i, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_permute(PERM_JIK, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall3_policy<NextPolicy, PolicyJ, PolicyI, PolicyK>(NextPolicyTag(), is_j, is_i, is_k,
    [=](Index_type j, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_permute(PERM_JKI, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall3_policy<NextPolicy, PolicyJ, PolicyK, PolicyI>(NextPolicyTag(), is_j, is_k, is_i,
    [=](Index_type j, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_permute(PERM_KIJ, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall3_policy<NextPolicy, PolicyK, PolicyI, PolicyJ>(NextPolicyTag(), is_k, is_i, is_j,
    [=](Index_type k, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_permute(PERM_KJI, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall3_policy<NextPolicy, PolicyK, PolicyJ, PolicyI>(NextPolicyTag(), is_k, is_j, is_i,
    [=](Index_type k, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_IJKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_j, is_k, is_l,
    [=](Index_type i, Index_type j, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_IJLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyI, PolicyJ, PolicyL, PolicyK>(NextPolicyTag(), is_i, is_j, is_l, is_k,
    [=](Index_type i, Index_type j, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_IKJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyI, PolicyK, PolicyJ, PolicyL>(NextPolicyTag(), is_i, is_k, is_j, is_l,
    [=](Index_type i, Index_type k, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_IKLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyI, PolicyK, PolicyL, PolicyJ>(NextPolicyTag(), is_i, is_k, is_l, is_j,
    [=](Index_type i, Index_type k, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_ILJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyI, PolicyL, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_l, is_j, is_k,
    [=](Index_type i, Index_type l, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_ILKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyI, PolicyL, PolicyK, PolicyJ>(NextPolicyTag(), is_i, is_l, is_k, is_j,
    [=](Index_type i, Index_type l, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_JIKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyJ, PolicyI, PolicyK, PolicyL>(NextPolicyTag(), is_j, is_i, is_k, is_l,
    [=](Index_type j, Index_type i, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_JILK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyJ, PolicyI, PolicyL, PolicyK>(NextPolicyTag(), is_j, is_i, is_l, is_k,
    [=](Index_type j, Index_type i, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_JKIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyJ, PolicyK, PolicyI, PolicyL>(NextPolicyTag(), is_j, is_k, is_i, is_l,
    [=](Index_type j, Index_type k, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_JKLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyJ, PolicyK, PolicyL, PolicyI>(NextPolicyTag(), is_j, is_k, is_l, is_i,
    [=](Index_type j, Index_type k, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_JLIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyJ, PolicyL, PolicyI, PolicyK>(NextPolicyTag(), is_j, is_l, is_i, is_k,
    [=](Index_type j, Index_type l, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_JLKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyJ, PolicyL, PolicyK, PolicyI>(NextPolicyTag(), is_j, is_l, is_k, is_i,
    [=](Index_type j, Index_type l, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_KIJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyK, PolicyI, PolicyJ, PolicyL>(NextPolicyTag(), is_k, is_i, is_j, is_l,
    [=](Index_type k, Index_type i, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_KILJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyK, PolicyI, PolicyL, PolicyJ>(NextPolicyTag(), is_k, is_i, is_l, is_j,
    [=](Index_type k, Index_type i, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_KJIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyK, PolicyJ, PolicyI, PolicyL>(NextPolicyTag(), is_k, is_j, is_i, is_l,
    [=](Index_type k, Index_type j, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_KJLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyK, PolicyJ, PolicyL, PolicyI>(NextPolicyTag(), is_k, is_j, is_l, is_i,
    [=](Index_type k, Index_type j, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_KLIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyK, PolicyL, PolicyI, PolicyJ>(NextPolicyTag(), is_k, is_l, is_i, is_j,
    [=](Index_type k, Index_type l, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_KLJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyK, PolicyL, PolicyJ, PolicyI>(NextPolicyTag(), is_k, is_l, is_j, is_i,
    [=](Index_type k, Index_type l, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_LIJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyL, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_l, is_i, is_j, is_k,
    [=](Index_type l, Index_type i, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_LIKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyL, PolicyI, PolicyK, PolicyJ>(NextPolicyTag(), is_l, is_i, is_k, is_j,
    [=](Index_type l, Index_type i, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_LJIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyL, PolicyJ, PolicyI, PolicyK>(NextPolicyTag(), is_l, is_j, is_i, is_k,
    [=](Index_type l, Index_type j, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_LJKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyL, PolicyJ, PolicyK, PolicyI>(NextPolicyTag(), is_l, is_j, is_k, is_i,
    [=](Index_type l, Index_type j, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_LKIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyL, PolicyK, PolicyI, PolicyJ>(NextPolicyTag(), is_l, is_k, is_i, is_j,
    [=](Index_type l, Index_type k, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_permute(PERM_LKJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall4_policy<NextPolicy, PolicyL, PolicyK, PolicyJ, PolicyI>(NextPolicyTag(), is_l, is_k, is_j, is_i,
    [=](Index_type l, Index_type k, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJKLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_i, is_j, is_k, is_l, is_m,
    [=](Index_type i, Index_type j, Index_type k, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJKML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyK, PolicyM, PolicyL>(NextPolicyTag(), is_i, is_j, is_k, is_m, is_l,
    [=](Index_type i, Index_type j, Index_type k, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJLKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyL, PolicyK, PolicyM>(NextPolicyTag(), is_i, is_j, is_l, is_k, is_m,
    [=](Index_type i, Index_type j, Index_type l, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJLMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyL, PolicyM, PolicyK>(NextPolicyTag(), is_i, is_j, is_l, is_m, is_k,
    [=](Index_type i, Index_type j, Index_type l, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJMKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyM, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_j, is_m, is_k, is_l,
    [=](Index_type i, Index_type j, Index_type m, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IJMLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyJ, PolicyM, PolicyL, PolicyK>(NextPolicyTag(), is_i, is_j, is_m, is_l, is_k,
    [=](Index_type i, Index_type j, Index_type m, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKJLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyJ, PolicyL, PolicyM>(NextPolicyTag(), is_i, is_k, is_j, is_l, is_m,
    [=](Index_type i, Index_type k, Index_type j, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKJML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyJ, PolicyM, PolicyL>(NextPolicyTag(), is_i, is_k, is_j, is_m, is_l,
    [=](Index_type i, Index_type k, Index_type j, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKLJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyL, PolicyJ, PolicyM>(NextPolicyTag(), is_i, is_k, is_l, is_j, is_m,
    [=](Index_type i, Index_type k, Index_type l, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKLMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyL, PolicyM, PolicyJ>(NextPolicyTag(), is_i, is_k, is_l, is_m, is_j,
    [=](Index_type i, Index_type k, Index_type l, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKMJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyM, PolicyJ, PolicyL>(NextPolicyTag(), is_i, is_k, is_m, is_j, is_l,
    [=](Index_type i, Index_type k, Index_type m, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IKMLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyK, PolicyM, PolicyL, PolicyJ>(NextPolicyTag(), is_i, is_k, is_m, is_l, is_j,
    [=](Index_type i, Index_type k, Index_type m, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILJKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyJ, PolicyK, PolicyM>(NextPolicyTag(), is_i, is_l, is_j, is_k, is_m,
    [=](Index_type i, Index_type l, Index_type j, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILJMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyJ, PolicyM, PolicyK>(NextPolicyTag(), is_i, is_l, is_j, is_m, is_k,
    [=](Index_type i, Index_type l, Index_type j, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILKJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyK, PolicyJ, PolicyM>(NextPolicyTag(), is_i, is_l, is_k, is_j, is_m,
    [=](Index_type i, Index_type l, Index_type k, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILKMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyK, PolicyM, PolicyJ>(NextPolicyTag(), is_i, is_l, is_k, is_m, is_j,
    [=](Index_type i, Index_type l, Index_type k, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILMJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyM, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_l, is_m, is_j, is_k,
    [=](Index_type i, Index_type l, Index_type m, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_ILMKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyL, PolicyM, PolicyK, PolicyJ>(NextPolicyTag(), is_i, is_l, is_m, is_k, is_j,
    [=](Index_type i, Index_type l, Index_type m, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMJKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_i, is_m, is_j, is_k, is_l,
    [=](Index_type i, Index_type m, Index_type j, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMJLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyJ, PolicyL, PolicyK>(NextPolicyTag(), is_i, is_m, is_j, is_l, is_k,
    [=](Index_type i, Index_type m, Index_type j, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMKJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyK, PolicyJ, PolicyL>(NextPolicyTag(), is_i, is_m, is_k, is_j, is_l,
    [=](Index_type i, Index_type m, Index_type k, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMKLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyK, PolicyL, PolicyJ>(NextPolicyTag(), is_i, is_m, is_k, is_l, is_j,
    [=](Index_type i, Index_type m, Index_type k, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMLJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyL, PolicyJ, PolicyK>(NextPolicyTag(), is_i, is_m, is_l, is_j, is_k,
    [=](Index_type i, Index_type m, Index_type l, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_IMLKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyI, PolicyM, PolicyL, PolicyK, PolicyJ>(NextPolicyTag(), is_i, is_m, is_l, is_k, is_j,
    [=](Index_type i, Index_type m, Index_type l, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIKLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyK, PolicyL, PolicyM>(NextPolicyTag(), is_j, is_i, is_k, is_l, is_m,
    [=](Index_type j, Index_type i, Index_type k, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIKML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyK, PolicyM, PolicyL>(NextPolicyTag(), is_j, is_i, is_k, is_m, is_l,
    [=](Index_type j, Index_type i, Index_type k, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JILKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyL, PolicyK, PolicyM>(NextPolicyTag(), is_j, is_i, is_l, is_k, is_m,
    [=](Index_type j, Index_type i, Index_type l, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JILMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyL, PolicyM, PolicyK>(NextPolicyTag(), is_j, is_i, is_l, is_m, is_k,
    [=](Index_type j, Index_type i, Index_type l, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIMKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyM, PolicyK, PolicyL>(NextPolicyTag(), is_j, is_i, is_m, is_k, is_l,
    [=](Index_type j, Index_type i, Index_type m, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JIMLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyI, PolicyM, PolicyL, PolicyK>(NextPolicyTag(), is_j, is_i, is_m, is_l, is_k,
    [=](Index_type j, Index_type i, Index_type m, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKILM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyI, PolicyL, PolicyM>(NextPolicyTag(), is_j, is_k, is_i, is_l, is_m,
    [=](Index_type j, Index_type k, Index_type i, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKIML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyI, PolicyM, PolicyL>(NextPolicyTag(), is_j, is_k, is_i, is_m, is_l,
    [=](Index_type j, Index_type k, Index_type i, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKLIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyL, PolicyI, PolicyM>(NextPolicyTag(), is_j, is_k, is_l, is_i, is_m,
    [=](Index_type j, Index_type k, Index_type l, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKLMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyL, PolicyM, PolicyI>(NextPolicyTag(), is_j, is_k, is_l, is_m, is_i,
    [=](Index_type j, Index_type k, Index_type l, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKMIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyM, PolicyI, PolicyL>(NextPolicyTag(), is_j, is_k, is_m, is_i, is_l,
    [=](Index_type j, Index_type k, Index_type m, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JKMLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyK, PolicyM, PolicyL, PolicyI>(NextPolicyTag(), is_j, is_k, is_m, is_l, is_i,
    [=](Index_type j, Index_type k, Index_type m, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLIKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyI, PolicyK, PolicyM>(NextPolicyTag(), is_j, is_l, is_i, is_k, is_m,
    [=](Index_type j, Index_type l, Index_type i, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLIMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyI, PolicyM, PolicyK>(NextPolicyTag(), is_j, is_l, is_i, is_m, is_k,
    [=](Index_type j, Index_type l, Index_type i, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLKIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyK, PolicyI, PolicyM>(NextPolicyTag(), is_j, is_l, is_k, is_i, is_m,
    [=](Index_type j, Index_type l, Index_type k, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLKMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyK, PolicyM, PolicyI>(NextPolicyTag(), is_j, is_l, is_k, is_m, is_i,
    [=](Index_type j, Index_type l, Index_type k, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLMIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyM, PolicyI, PolicyK>(NextPolicyTag(), is_j, is_l, is_m, is_i, is_k,
    [=](Index_type j, Index_type l, Index_type m, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JLMKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyL, PolicyM, PolicyK, PolicyI>(NextPolicyTag(), is_j, is_l, is_m, is_k, is_i,
    [=](Index_type j, Index_type l, Index_type m, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMIKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyI, PolicyK, PolicyL>(NextPolicyTag(), is_j, is_m, is_i, is_k, is_l,
    [=](Index_type j, Index_type m, Index_type i, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMILK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyI, PolicyL, PolicyK>(NextPolicyTag(), is_j, is_m, is_i, is_l, is_k,
    [=](Index_type j, Index_type m, Index_type i, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMKIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyK, PolicyI, PolicyL>(NextPolicyTag(), is_j, is_m, is_k, is_i, is_l,
    [=](Index_type j, Index_type m, Index_type k, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMKLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyK, PolicyL, PolicyI>(NextPolicyTag(), is_j, is_m, is_k, is_l, is_i,
    [=](Index_type j, Index_type m, Index_type k, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMLIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyL, PolicyI, PolicyK>(NextPolicyTag(), is_j, is_m, is_l, is_i, is_k,
    [=](Index_type j, Index_type m, Index_type l, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_JMLKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyJ, PolicyM, PolicyL, PolicyK, PolicyI>(NextPolicyTag(), is_j, is_m, is_l, is_k, is_i,
    [=](Index_type j, Index_type m, Index_type l, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIJLM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyJ, PolicyL, PolicyM>(NextPolicyTag(), is_k, is_i, is_j, is_l, is_m,
    [=](Index_type k, Index_type i, Index_type j, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIJML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyJ, PolicyM, PolicyL>(NextPolicyTag(), is_k, is_i, is_j, is_m, is_l,
    [=](Index_type k, Index_type i, Index_type j, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KILJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyL, PolicyJ, PolicyM>(NextPolicyTag(), is_k, is_i, is_l, is_j, is_m,
    [=](Index_type k, Index_type i, Index_type l, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KILMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyL, PolicyM, PolicyJ>(NextPolicyTag(), is_k, is_i, is_l, is_m, is_j,
    [=](Index_type k, Index_type i, Index_type l, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIMJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyM, PolicyJ, PolicyL>(NextPolicyTag(), is_k, is_i, is_m, is_j, is_l,
    [=](Index_type k, Index_type i, Index_type m, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KIMLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyI, PolicyM, PolicyL, PolicyJ>(NextPolicyTag(), is_k, is_i, is_m, is_l, is_j,
    [=](Index_type k, Index_type i, Index_type m, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJILM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyI, PolicyL, PolicyM>(NextPolicyTag(), is_k, is_j, is_i, is_l, is_m,
    [=](Index_type k, Index_type j, Index_type i, Index_type l, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJIML, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyI, PolicyM, PolicyL>(NextPolicyTag(), is_k, is_j, is_i, is_m, is_l,
    [=](Index_type k, Index_type j, Index_type i, Index_type m, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJLIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyL, PolicyI, PolicyM>(NextPolicyTag(), is_k, is_j, is_l, is_i, is_m,
    [=](Index_type k, Index_type j, Index_type l, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJLMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyL, PolicyM, PolicyI>(NextPolicyTag(), is_k, is_j, is_l, is_m, is_i,
    [=](Index_type k, Index_type j, Index_type l, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJMIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyM, PolicyI, PolicyL>(NextPolicyTag(), is_k, is_j, is_m, is_i, is_l,
    [=](Index_type k, Index_type j, Index_type m, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KJMLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyJ, PolicyM, PolicyL, PolicyI>(NextPolicyTag(), is_k, is_j, is_m, is_l, is_i,
    [=](Index_type k, Index_type j, Index_type m, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLIJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyI, PolicyJ, PolicyM>(NextPolicyTag(), is_k, is_l, is_i, is_j, is_m,
    [=](Index_type k, Index_type l, Index_type i, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLIMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyI, PolicyM, PolicyJ>(NextPolicyTag(), is_k, is_l, is_i, is_m, is_j,
    [=](Index_type k, Index_type l, Index_type i, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLJIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyJ, PolicyI, PolicyM>(NextPolicyTag(), is_k, is_l, is_j, is_i, is_m,
    [=](Index_type k, Index_type l, Index_type j, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLJMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyJ, PolicyM, PolicyI>(NextPolicyTag(), is_k, is_l, is_j, is_m, is_i,
    [=](Index_type k, Index_type l, Index_type j, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLMIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyM, PolicyI, PolicyJ>(NextPolicyTag(), is_k, is_l, is_m, is_i, is_j,
    [=](Index_type k, Index_type l, Index_type m, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KLMJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyL, PolicyM, PolicyJ, PolicyI>(NextPolicyTag(), is_k, is_l, is_m, is_j, is_i,
    [=](Index_type k, Index_type l, Index_type m, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMIJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyI, PolicyJ, PolicyL>(NextPolicyTag(), is_k, is_m, is_i, is_j, is_l,
    [=](Index_type k, Index_type m, Index_type i, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMILJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyI, PolicyL, PolicyJ>(NextPolicyTag(), is_k, is_m, is_i, is_l, is_j,
    [=](Index_type k, Index_type m, Index_type i, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMJIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyJ, PolicyI, PolicyL>(NextPolicyTag(), is_k, is_m, is_j, is_i, is_l,
    [=](Index_type k, Index_type m, Index_type j, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMJLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyJ, PolicyL, PolicyI>(NextPolicyTag(), is_k, is_m, is_j, is_l, is_i,
    [=](Index_type k, Index_type m, Index_type j, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMLIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyL, PolicyI, PolicyJ>(NextPolicyTag(), is_k, is_m, is_l, is_i, is_j,
    [=](Index_type k, Index_type m, Index_type l, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_KMLJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyK, PolicyM, PolicyL, PolicyJ, PolicyI>(NextPolicyTag(), is_k, is_m, is_l, is_j, is_i,
    [=](Index_type k, Index_type m, Index_type l, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIJKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyJ, PolicyK, PolicyM>(NextPolicyTag(), is_l, is_i, is_j, is_k, is_m,
    [=](Index_type l, Index_type i, Index_type j, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIJMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyJ, PolicyM, PolicyK>(NextPolicyTag(), is_l, is_i, is_j, is_m, is_k,
    [=](Index_type l, Index_type i, Index_type j, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIKJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyK, PolicyJ, PolicyM>(NextPolicyTag(), is_l, is_i, is_k, is_j, is_m,
    [=](Index_type l, Index_type i, Index_type k, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIKMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyK, PolicyM, PolicyJ>(NextPolicyTag(), is_l, is_i, is_k, is_m, is_j,
    [=](Index_type l, Index_type i, Index_type k, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIMJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyM, PolicyJ, PolicyK>(NextPolicyTag(), is_l, is_i, is_m, is_j, is_k,
    [=](Index_type l, Index_type i, Index_type m, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LIMKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyI, PolicyM, PolicyK, PolicyJ>(NextPolicyTag(), is_l, is_i, is_m, is_k, is_j,
    [=](Index_type l, Index_type i, Index_type m, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJIKM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyI, PolicyK, PolicyM>(NextPolicyTag(), is_l, is_j, is_i, is_k, is_m,
    [=](Index_type l, Index_type j, Index_type i, Index_type k, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJIMK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyI, PolicyM, PolicyK>(NextPolicyTag(), is_l, is_j, is_i, is_m, is_k,
    [=](Index_type l, Index_type j, Index_type i, Index_type m, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJKIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyK, PolicyI, PolicyM>(NextPolicyTag(), is_l, is_j, is_k, is_i, is_m,
    [=](Index_type l, Index_type j, Index_type k, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJKMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyK, PolicyM, PolicyI>(NextPolicyTag(), is_l, is_j, is_k, is_m, is_i,
    [=](Index_type l, Index_type j, Index_type k, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJMIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyM, PolicyI, PolicyK>(NextPolicyTag(), is_l, is_j, is_m, is_i, is_k,
    [=](Index_type l, Index_type j, Index_type m, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LJMKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyJ, PolicyM, PolicyK, PolicyI>(NextPolicyTag(), is_l, is_j, is_m, is_k, is_i,
    [=](Index_type l, Index_type j, Index_type m, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKIJM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyI, PolicyJ, PolicyM>(NextPolicyTag(), is_l, is_k, is_i, is_j, is_m,
    [=](Index_type l, Index_type k, Index_type i, Index_type j, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKIMJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyI, PolicyM, PolicyJ>(NextPolicyTag(), is_l, is_k, is_i, is_m, is_j,
    [=](Index_type l, Index_type k, Index_type i, Index_type m, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKJIM, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyJ, PolicyI, PolicyM>(NextPolicyTag(), is_l, is_k, is_j, is_i, is_m,
    [=](Index_type l, Index_type k, Index_type j, Index_type i, Index_type m){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKJMI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyJ, PolicyM, PolicyI>(NextPolicyTag(), is_l, is_k, is_j, is_m, is_i,
    [=](Index_type l, Index_type k, Index_type j, Index_type m, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKMIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyM, PolicyI, PolicyJ>(NextPolicyTag(), is_l, is_k, is_m, is_i, is_j,
    [=](Index_type l, Index_type k, Index_type m, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LKMJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyK, PolicyM, PolicyJ, PolicyI>(NextPolicyTag(), is_l, is_k, is_m, is_j, is_i,
    [=](Index_type l, Index_type k, Index_type m, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMIJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_l, is_m, is_i, is_j, is_k,
    [=](Index_type l, Index_type m, Index_type i, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMIKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyI, PolicyK, PolicyJ>(NextPolicyTag(), is_l, is_m, is_i, is_k, is_j,
    [=](Index_type l, Index_type m, Index_type i, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMJIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyJ, PolicyI, PolicyK>(NextPolicyTag(), is_l, is_m, is_j, is_i, is_k,
    [=](Index_type l, Index_type m, Index_type j, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMJKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyJ, PolicyK, PolicyI>(NextPolicyTag(), is_l, is_m, is_j, is_k, is_i,
    [=](Index_type l, Index_type m, Index_type j, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMKIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyK, PolicyI, PolicyJ>(NextPolicyTag(), is_l, is_m, is_k, is_i, is_j,
    [=](Index_type l, Index_type m, Index_type k, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_LMKJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyL, PolicyM, PolicyK, PolicyJ, PolicyI>(NextPolicyTag(), is_l, is_m, is_k, is_j, is_i,
    [=](Index_type l, Index_type m, Index_type k, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIJKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyJ, PolicyK, PolicyL>(NextPolicyTag(), is_m, is_i, is_j, is_k, is_l,
    [=](Index_type m, Index_type i, Index_type j, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIJLK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyJ, PolicyL, PolicyK>(NextPolicyTag(), is_m, is_i, is_j, is_l, is_k,
    [=](Index_type m, Index_type i, Index_type j, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIKJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyK, PolicyJ, PolicyL>(NextPolicyTag(), is_m, is_i, is_k, is_j, is_l,
    [=](Index_type m, Index_type i, Index_type k, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MIKLJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyK, PolicyL, PolicyJ>(NextPolicyTag(), is_m, is_i, is_k, is_l, is_j,
    [=](Index_type m, Index_type i, Index_type k, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MILJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyL, PolicyJ, PolicyK>(NextPolicyTag(), is_m, is_i, is_l, is_j, is_k,
    [=](Index_type m, Index_type i, Index_type l, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MILKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyI, PolicyL, PolicyK, PolicyJ>(NextPolicyTag(), is_m, is_i, is_l, is_k, is_j,
    [=](Index_type m, Index_type i, Index_type l, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJIKL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyI, PolicyK, PolicyL>(NextPolicyTag(), is_m, is_j, is_i, is_k, is_l,
    [=](Index_type m, Index_type j, Index_type i, Index_type k, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJILK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyI, PolicyL, PolicyK>(NextPolicyTag(), is_m, is_j, is_i, is_l, is_k,
    [=](Index_type m, Index_type j, Index_type i, Index_type l, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJKIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyK, PolicyI, PolicyL>(NextPolicyTag(), is_m, is_j, is_k, is_i, is_l,
    [=](Index_type m, Index_type j, Index_type k, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJKLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyK, PolicyL, PolicyI>(NextPolicyTag(), is_m, is_j, is_k, is_l, is_i,
    [=](Index_type m, Index_type j, Index_type k, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJLIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyL, PolicyI, PolicyK>(NextPolicyTag(), is_m, is_j, is_l, is_i, is_k,
    [=](Index_type m, Index_type j, Index_type l, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MJLKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyJ, PolicyL, PolicyK, PolicyI>(NextPolicyTag(), is_m, is_j, is_l, is_k, is_i,
    [=](Index_type m, Index_type j, Index_type l, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKIJL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyI, PolicyJ, PolicyL>(NextPolicyTag(), is_m, is_k, is_i, is_j, is_l,
    [=](Index_type m, Index_type k, Index_type i, Index_type j, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKILJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyI, PolicyL, PolicyJ>(NextPolicyTag(), is_m, is_k, is_i, is_l, is_j,
    [=](Index_type m, Index_type k, Index_type i, Index_type l, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKJIL, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyJ, PolicyI, PolicyL>(NextPolicyTag(), is_m, is_k, is_j, is_i, is_l,
    [=](Index_type m, Index_type k, Index_type j, Index_type i, Index_type l){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKJLI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyJ, PolicyL, PolicyI>(NextPolicyTag(), is_m, is_k, is_j, is_l, is_i,
    [=](Index_type m, Index_type k, Index_type j, Index_type l, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKLIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyL, PolicyI, PolicyJ>(NextPolicyTag(), is_m, is_k, is_l, is_i, is_j,
    [=](Index_type m, Index_type k, Index_type l, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MKLJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyK, PolicyL, PolicyJ, PolicyI>(NextPolicyTag(), is_m, is_k, is_l, is_j, is_i,
    [=](Index_type m, Index_type k, Index_type l, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLIJK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyI, PolicyJ, PolicyK>(NextPolicyTag(), is_m, is_l, is_i, is_j, is_k,
    [=](Index_type m, Index_type l, Index_type i, Index_type j, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLIKJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyI, PolicyK, PolicyJ>(NextPolicyTag(), is_m, is_l, is_i, is_k, is_j,
    [=](Index_type m, Index_type l, Index_type i, Index_type k, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLJIK, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyJ, PolicyI, PolicyK>(NextPolicyTag(), is_m, is_l, is_j, is_i, is_k,
    [=](Index_type m, Index_type l, Index_type j, Index_type i, Index_type k){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLJKI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyJ, PolicyK, PolicyI>(NextPolicyTag(), is_m, is_l, is_j, is_k, is_i,
    [=](Index_type m, Index_type l, Index_type j, Index_type k, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLKIJ, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyK, PolicyI, PolicyJ>(NextPolicyTag(), is_m, is_l, is_k, is_i, is_j,
    [=](Index_type m, Index_type l, Index_type k, Index_type i, Index_type j){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}

template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_permute(PERM_MLKJI, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  typedef typename POLICY::NextPolicy            NextPolicy;
  typedef typename POLICY::NextPolicy::PolicyTag NextPolicyTag;

  // Call next policy with permuted indices and policies
  forall5_policy<NextPolicy, PolicyM, PolicyL, PolicyK, PolicyJ, PolicyI>(NextPolicyTag(), is_m, is_l, is_k, is_j, is_i,
    [=](Index_type m, Index_type l, Index_type k, Index_type j, Index_type i){
      // Call body with non-permuted indices
      body(i, j, k, l, m);
    });
}


/******************************************************************
 *  forallN_policy(), loop interchange policies
 ******************************************************************/


/*!
 * \brief Permutation policy function, providing loop interchange.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename TI, typename TJ, typename BODY>
RAJA_INLINE void forall2_policy(Forall2_Permute_Tag, TI const &is_i, TJ const &is_j, BODY body){
  // Get the loop permutation
  typedef typename POLICY::LoopOrder LoopOrder;

  // Call loop interchange overload to re-wrire indicies and policies
  forall2_permute<POLICY, PolicyI, PolicyJ>(LoopOrder(), is_i, is_j, body);
}


/*!
 * \brief Permutation policy function, providing loop interchange.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename TI, typename TJ, typename TK, typename BODY>
RAJA_INLINE void forall3_policy(Forall3_Permute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, BODY body){
  // Get the loop permutation
  typedef typename POLICY::LoopOrder LoopOrder;

  // Call loop interchange overload to re-wrire indicies and policies
  forall3_permute<POLICY, PolicyI, PolicyJ, PolicyK>(LoopOrder(), is_i, is_j, is_k, body);
}


/*!
 * \brief Permutation policy function, providing loop interchange.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename TI, typename TJ, typename TK, typename TL, typename BODY>
RAJA_INLINE void forall4_policy(Forall4_Permute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, BODY body){
  // Get the loop permutation
  typedef typename POLICY::LoopOrder LoopOrder;

  // Call loop interchange overload to re-wrire indicies and policies
  forall4_permute<POLICY, PolicyI, PolicyJ, PolicyK, PolicyL>(LoopOrder(), is_i, is_j, is_k, is_l, body);
}


/*!
 * \brief Permutation policy function, providing loop interchange.
 */
template<typename POLICY, typename PolicyI, typename PolicyJ, typename PolicyK, typename PolicyL, typename PolicyM, typename TI, typename TJ, typename TK, typename TL, typename TM, typename BODY>
RAJA_INLINE void forall5_policy(Forall5_Permute_Tag, TI const &is_i, TJ const &is_j, TK const &is_k, TL const &is_l, TM const &is_m, BODY body){
  // Get the loop permutation
  typedef typename POLICY::LoopOrder LoopOrder;

  // Call loop interchange overload to re-wrire indicies and policies
  forall5_permute<POLICY, PolicyI, PolicyJ, PolicyK, PolicyL, PolicyM>(LoopOrder(), is_i, is_j, is_k, is_l, is_m, body);
}



} // namespace RAJA
  
#endif

